<style lang="less">
@import "../../styles/form.less";
</style>
<template>
  <view class="form container">
    <view class="form_item bb">
        <view class="form_label">学校名称</view>
        <view class="form_content">
          <input placeholder-class="phcolor" type="text" data-name="school" value="{{school}}" placeholder="请填写" bindinput="inputChange" />
        </view>
    </view>
    <view class="form_item bb">
        <view class="form_label">专业</view>
        <view class="form_content">
            <input placeholder-class="phcolor" type="text" data-name="specialtyid" value="{{specialtyid}}" placeholder="请填写" bindinput="inputChange" />
        </view>
    </view>
    <view class="form_item bb">
      <view class="form_label">学历</view>
      <picker data-name="educationbg" data-current="0" value="{{screen[0].index}}" bindchange="pickerChange" range="{{screen[0].list}}">
          <view class="form_content flex alignitems">
            <view class="flex1">
                {{educationbg?educationbg:'请选择'}}
            </view>
            <view class="form_arrow">
              <image src="../../images/icons/arrow_right.png"></image>
            </view>
          </view>
      </picker>
    </view>
    <view class="form_item pb bb">
      <view class="form_label">开始时间</view>
      <picker mode="multiSelector" bindchange="starttimeChange" bindcolumnchange="starttimeColumnChange" value="{{starttimeIndex}}" range="{{starttimeArray}}">
        <view class="form_content flex alignitems">
          <view class="flex1">{{starttime?starttime:"请选择"}}</view>
          <view class="form_arrow">
            <image src="../../images/icons/arrow_right.png"></image>
          </view>
        </view>
      </picker>
    </view>
    <view class="form_item pb bb">
        <view class="form_label">结束时间</view>
        <picker mode="multiSelector" bindchange="endtimeChange" bindcolumnchange="endtimeColumnChange" value="{{endtimeIndex}}" range="{{endtimeArray}}">
          <view class="form_content flex alignitems">
            <view class="flex1">{{endtime?endtime:"请选择"}}</view>
            <view class="form_arrow">
              <image src="../../images/icons/arrow_right.png"></image>
            </view>
          </view>
        </picker>

    </view>

    <view class="form_btn flex">
      <button class="delbtn" @tap="toggleM" wx:if="{{educationid!=''&&length>1}}">删除</button>
      <button class="mainbtn flex1" @tap="formSubmit">保存</button>
    </view>
    <i-modal title="删除" visible="{{ visible }}" bind:ok="handleOk" bind:cancel="toggleM">
      <view>是否确认删除？</view>
    </i-modal>

  </view>
</template>
<script>
  import wepy from 'wepy'
  import api from '../../api/api';
  import tip from '../../utils/tip';
  let monthArr =[1,2,3,4,5,6,7,8,9,10,11,12]
  import moment from 'moment'

  export default class BaseInfo extends wepy.page {

    config = {
      navigationBarTitleText: '教育经历',
      navigationBarBackgroundColor: "#fafafa",
      usingComponents: {
        "i-modal": "../../iview/modal/index"
      }
    }

    data = {
      screen:[
        {
          list:[],
          index:[],
        }
      ],
      school:'',
      specialtyid:'',
      starttime:'',
      endtime:'',
      educationbg:'',
      educationid:'',
      token: "",
      tokenKey: "",
      resumeid:'',
      length:0,
      endtimeArray: [['至今'], ['至今']],
      endtimeIndex: [0, 0],
      starttimeArray: [['至今'], []],
      starttimeIndex: [0, 0],
      visible:false,
    }

    onLoad(options) {
      const that = this;
      let login = wx.getStorageSync('login')
      that.resumeid = options.resumeid;
      this.educationid = options.educationid || '';
      that.token = login.token
      that.tokenKey = login.tokenKey
      that.$apply();

      if(options.educationid) that.getData()

      const arr = ['DICT_JOB_EDU']
      for (var i = 0; i < arr.length; i++) {
        that.getDict(arr[i],i)
      }

      let one = []
      let now = new Date()
      let currentY = now.getFullYear()
      let currentM = now.getMonth()+1

      for(var i=0;i<31;i++){
        let v = currentY-i
        one.push(v+'')
        if(i==30) one.push(v+'以前')
      }


      this.starttimeArray[0] = one
      this.starttimeArray[1] = monthArr
      let a=['至今']
      var newA = [...a,...one]
      this.endtimeArray[0] = newA
      this.$apply()
    }

    methods = {
      handleOk(){
        this.delExperience()
      },
      toggleM(){
        console.log('切换状态')
        this.visible = !this.visible
        this.$apply()
      },
      endtimeChange: function (e) {
        const {endtimeArray} = this
        let v = e.detail.value
        if(v[0]==0 || v[0]==32){
          this.endtime = endtimeArray[0][v[0]]
        }else{
          let month = parseInt(v[1])+1
          let r = month<10?'0'+month:month
          this.endtime =endtimeArray[0][v[0]]+'/'+ r
        }
        this.multiIndex= e.detail.value
        this.$apply()
      },
      endtimeColumnChange: function (e) {
        var data = {
          endtimeArray: this.endtimeArray,
          endtimeIndex: this.endtimeIndex
        };
        data.endtimeIndex[e.detail.column] = e.detail.value;
        if(e.detail.column==0){
          if(data.endtimeIndex[0]==0){
            data.endtimeArray[1] = ['至今'];
            data.endtimeIndex[1] = 0
          }else if(data.endtimeIndex[0]==32){
            let arr= data.endtimeArray[0]
            data.endtimeArray[1] = [arr[arr.length-1]]
            data.endtimeIndex[1] = 0
          }else{
            data.endtimeArray[1] = monthArr
          }
        }
        this.$apply()
      },
      starttimeChange: function (e) {
        const {starttimeArray} = this
        let v = e.detail.value
        if(v[0]==31){
          this.starttime = starttimeArray[0][v[0]]
        }else{
          let month = parseInt(v[1])+1
          let r = month<10?'0'+month:month
          this.starttime =starttimeArray[0][v[0]]+'/'+ r
        }
        this.multiIndex= e.detail.value
        this.$apply()
      },
      starttimeColumnChange: function (e) {
        var data = {
          starttimeArray: this.starttimeArray,
          starttimeIndex: this.starttimeIndex
        };
        data.starttimeIndex[e.detail.column] = e.detail.value;
          if(data.starttimeIndex[0]==31){
            let arr= data.starttimeArray[0]
            data.starttimeArray[1] = [arr[arr.length-1]]
            data.starttimeIndex[1] = 0
          }else{
            data.starttimeArray[1] = monthArr
          }
        this.$apply()
      },

        // 提交表单--基本信息编辑新增
        formSubmit: function(e) {
          const that = this
            if(!that.school){
              tip.error('学校名称不为空');
              return false
            }
            if(!that.specialtyid){
              tip.error('专业不为空');
              return false
            }
            if((!that.a_educationbg)&&that.index==''){
              tip.error('请选择教育背景');
              return false
            }
            if(!that.starttime){
              tip.error('请选择开始时间');
              return false
            }
            if(!that.endtime){
              tip.error('请选择结束时间');
              return false
            }


            let startTime=that.starttime
            let endTime=that.endtime

            if(startTime.indexOf('/')!=-1) startTime = startTime.replace(/\//g,"-")

            if(moment(moment().format('YYYY-MM')).diff(moment(startTime), 'months')<0){
              tip.error('起始时间不能大于当前时间')
              return false
            }

            if(that.endtime.indexOf('以前')!=-1&&that.starttime.indexOf('以前')==-1){
              tip.error('起始时间不能大于结束时间')
              return false
            }

            if(that.starttime.indexOf('以前')==-1&&(that.endtime!='至今'&&that.endtime.indexOf('以前')==-1)){

              if(endTime.indexOf('/')!=-1) endTime = endTime.replace(/\//g,"-")
              if(startTime.indexOf('/')!=-1) startTime = startTime.replace(/\//g,"-")
              let diff = moment(endTime).diff(moment(startTime), 'months')
              if(diff<0){
                tip.error('起始时间不能大于结束时间')
                return false
              }

            }

            this.changeData()
        },
        inputChange(e){
          const name = e.currentTarget.dataset.name
          this[name] = e.detail.value;
          this.$apply();
        },
        pickerChange(e){
          const name = e.currentTarget.dataset.name
          const current = e.currentTarget.dataset.current
          const index = e.detail.value
          this[name] = this.screen[current].list[index]
          this.screen[current].index = e.detail.value;
          this.$apply();
        },
        timeChange: function(e) {
          const name = e.currentTarget.dataset.name
          this[name] = e.detail.value.replace(/-/g,"/");
          this.$apply();
        }
    }

    //获取教育经历
    async getData() {
      const that = this
      wx.showLoading({
          title: '加载中',
      })
      api.getResumeInfo({
        query: {
              head: {
                "transcode": "M0006",
                "type": "h"
              },
              data: {
                "token": that.token,
                "tokenKey": that.tokenKey,
                "resumeid": that.resumeid
              }
            }
        }).then(res=>{
          if (res.data.returnCode == "AAAAAAA") {
              wx.hideLoading()
              var jobExper = JSON.parse(res.data.data);
              let resultArr = jobExper.find(item => item.educationid == that.educationid)
              that.school = resultArr.school;
              that.length = jobExper.length;
              that.specialtyid = resultArr.specialtyid;
              that.starttime = resultArr.starttime;
              that.endtime = resultArr.endtime;
              that.educationbg = resultArr.educationbg;
              that.$apply();
          } else {
              tip.error(res.returnMsg);
          }
        })

    }

    //获取数据字典
    getDict(code,i) {
      const that = this
      api.getDictData({
        query: {
            head: {
                "transcode": "DC001",
                "type": "h"
            },
            data: {
                "groupcode": code,
                "selAll": "false"
            }
        }
      }).then(res=>{
        if (res.data.returnCode == "AAAAAAA") {
            var arr = []
            res.data.data.forEach((item,index)=>{
                arr.push(item.label)
            })
            arr.shift()
            that.screen[i].list = arr;
            that.$apply();
        } else {
            tip.error(res.returnMsg);
        }

      }).catch(err=>{

      })
    }

    // 删除经历
    delExperience() {
      const that = this
      api.delExperience({
        query: {
            head: {
                "transcode": "M0029",
                "type": "h"
            },
            data: {
              token: that.token,
              tokenKey: that.tokenKey,
              resumeid:that.resumeid,
              educationid:that.educationid
            }
        }
      }).then(res=>{
        if (res.data && res.data.returnCode == "AAAAAAA") {
          tip.success('删除成功');
          let pages = getCurrentPages();
          let prevPage = pages[pages.length - 2];
          prevPage.update(3)
          wx.navigateBack({
           delta: 1
         })
        } else {
            tip.error(res.returnMsg);
        }
      }).catch(err=>{

      })
    }
    //修改表单数据
    async changeData() {
      const that = this
        // let data = obj2
        // let resultObj = Object.assign(data, obj);
      let obj= {
        token: this.token,
        tokenKey: this.tokenKey,
        resumeid: this.resumeid,
        school:that.school,
        specialtyid:that.specialtyid,
        starttime:that.starttime,
        endtime:that.endtime,
        educationbg:that.educationbg,
        educationid:that.educationid
      }
      wx.showLoading({
        title: '加载中',
      })
      api.getResumeInfo({
        query: {
            head: {
                "transcode": "M0016",
                "type": "h"
            },
            data: obj
          }
      }).then(res=>{
        wx.hideLoading()
        if(res.data && res.data.returnCode == "AAAAAAA") {
            let pages = getCurrentPages();
            let prevPage = pages[pages.length - 2];
            prevPage.update(3)
            wx.navigateBack({
             delta: 1
           })
        }else{
            console.log(data)
        }

      })
    }
  }
</script>
