<style lang="less">
@import "../../styles/form.less";
.headimg{
  width:160rpx;
  height:160rpx;
  display: block;
  border-radius: 50%;
  margin: 0 auto;
  background: #f8f8f8;
  margin-bottom: 20rpx;
  overflow: hidden;
  image{
    max-width: 100%;
    max-height: 100%;
  }
}
</style>
<template>
  <view class="form container">
    <!-- <view  @tap="changePortrait">
      <view class="headimg">
        <image mode="aspectFill"  class="icon-upload" wx:if="{{form.headimg}}" src="{{base64?'data:image/jpg;base64,':''}}{{form.headimg}}"></image>
        <image mode="aspectFill"  class="icon-upload" wx:else src="/images/icons/upload_head.png"></image>
      </view>
      <text>点击更换头像（图片大小不宜超过1M）</text>
    </view> -->
    <view class="form_item bb pb">
        <view class="form_label">简历名称</view>
        <view class="form_content">
            <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="resumename" value="{{form.resumename}}" placeholder="请填写" />
        </view>
    </view>
    <view class="form_item bb pb">
        <view class="form_label">姓名</view>
        <view class="form_content">
            <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="username" value="{{form.username}}" placeholder="请填写" />
        </view>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">性别</view>
      <picker data-name="sex" data-current="0" value="{{screen[0].index}}" bindchange="pickerChange" range="{{screen[0].list}}">
        <view class="form_content flex alignitems">
          <view class="flex1">
              {{form.sex?form.sex:'请选择'}}
          </view>
          <van-icon name="arrow" size="18" color="#888888"/>
        </view>
      </picker>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">出生年月</view>
      <picker data-name="borndate" mode="date" value="{{form.borndate}}" bindchange="dateChange" start="{{start}}" end="{{end}}">
          <view class="form_content flex alignitems">
              <view class="flex1">{{form.borndate?form.borndate:"请选择"}}</view>
              <van-icon name="arrow" size="18" color="#888888"/>
          </view>
      </picker>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">户籍地址</view>
      <view class="form_content">
          <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="address" value="{{form.address}}" placeholder="请填写" />
      </view>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">学历</view>
      <picker data-name="educationbg" data-current="4" value="{{screen[4].index}}" bindchange="pickerChange" range="{{screen[4].list}}">
        <view class="form_content flex alignitems">
          <view class="flex1">
              {{form.educationbg?form.educationbg:'请选择'}}
          </view>
          <van-icon name="arrow" size="18" color="#888888"/>
        </view>
      </picker>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">工作年限</view>
      <picker data-name="workyears" data-current="1" value="{{screen[1].index}}" bindchange="pickerChange" range="{{screen[1].list}}">
        <view class="form_content flex alignitems">
          <view class="flex1">
              {{form.workyears?form.workyears:'请选择'}}
          </view>
          <van-icon name="arrow" size="18" color="#888888"/>
        </view>
      </picker>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">手机</view>
      <view class="form_content">
          <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="telephone" value="{{form.telephone}}" placeholder="请填写" />
      </view>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">邮箱</view>
      <view class="form_content">
          <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="email" value="{{form.email}}" placeholder="请填写" />
      </view>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">工作状态</view>
      <picker data-name="jobstatus" data-current="3" value="{{screen[3].index}}" bindchange="pickerChange" range="{{screen[3].list}}">
        <view class="form_content flex alignitems">
          <view class="flex1">
              {{form.jobstatus?form.jobstatus:'请选择'}}
          </view>
          <van-icon name="arrow" size="18" color="#888888"/>
        </view>
      </picker>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">所在城市</view>
      <view class="form_content">
          <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="livecityid" value="{{form.livecityid}}" placeholder="请填写" />
      </view>
    </view>
    <view class="form_item bb pb">
      <view class="form_label">婚姻状况</view>
      <picker data-name="marital" data-current="2" value="{{screen[2].index}}" bindchange="pickerChange" range="{{screen[2].list}}">
        <view class="form_content flex alignitems">
          <view class="flex1">
              {{form.marital?form.marital:'请选择'}}
          </view>
          <van-icon name="arrow" size="18" color="#888888"/>
        </view>
      </picker>
    </view>

    <view class="form_btn">
      <button class="mainbtn" @tap="formSubmit">保存</button>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import api from '../../api/api';
  import tip from '../../utils/tip';
  import moment from 'moment'
  export default class BaseInfo extends wepy.page {


      config = {
        navigationBarTitleText: '基本信息',
        navigationBarBackgroundColor: "#fafafa",
        "usingComponents": {
          "van-icon": "../../vant/icon/index"
        }
      }

     data = {
      type:1,
      screen:[
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        }
      ],
      token:'',
      tokenKey:'',
      resumeid: '',
      form:{
        headimg:'',
        resumename:'',
        telephone:'',
        username:'',
        sex:'',
        marital:'',
        email:'',
        address:'',
        livecityid:'',
        borndate:'',
        educationbg:'',
        workyears:'',
        jobstatus:'',
      },
      start:'',
      end:'',
      base64:false
    }

      onLoad(options) {
        let date = new Date()
        const that = this;
        that.end = moment().subtract(18, "years").format("YYYY-MM-DD")
        that.start = moment().subtract(50, "years").format("YYYY-MM-DD")
        let login = wx.getStorageSync('login')
        that.resumeid = options.resumeid || '';
        that.type = options.type;
        that.token = login.token
        that.tokenKey = login.tokenKey
        that.$apply();

        if(that.resumeid) that.getData()
        const arr = ["DICT_BASE_SEX","DICT_RESUME_WORKYEAR","DICT_RESUME_WEDDING","DICT_RESUME_JOBSTATU","DICT_JOB_EDU"]

        for (var i = 0; i < arr.length; i++) {
          that.getDict(arr[i],i)
        }
      }
      methods = {
        changePortrait(){
            const that = this;
            that.choosePortrait();
        },
        // 提交表单--基本信息编辑新增
        formSubmit: function(e) {
          const that = this
          const {form} = this
          // if(!form.headimg){
          //   tip.error('简历头像不为空');
          //   return false
          // }
          if(!form.resumename){
            tip.error('简历名称不为空');
            return false
          }
          if(!form.username){
            tip.error('姓名不为空');
            return false
          }
          if(!form.sex){
            tip.error('请选择性别');
            return false
          }
          if(!form.borndate){
            tip.error('请选择出生年月');
            return false
          }
          if(!form.workyears){
            tip.error('请选择工作年限');
            return false
          }
          if(!form.telephone){
            tip.error('手机号码不为空');
            return false
          }
          if(!form.jobstatus){
            tip.error('请选择工作状态');
            return false
          }
          if(!form.livecityid){
            tip.error('所在城市不为空');
            return false
          }
          that.changeData()
        },
        inputChange(e){
          const { form }=this
          const name = e.currentTarget.dataset.name
          form[name] = e.detail.value;
          this.$apply();
        },
        pickerChange(e){
          const { form }=this
          const name = e.currentTarget.dataset.name
          const current = e.currentTarget.dataset.current
          const index = e.detail.value
          form[name] = this.screen[current].list[index]
          this.screen[current].index = e.detail.value;
          this.$apply();
        },
        dateChange(e) {
          this.form.borndate = e.detail.value;
          this.$apply();
        }
    };

    choosePortrait(event) {
      const that = this;
      wx.chooseImage({
          count: 1,
          sizeType: ['compressed'],     // 可以指定是原图还是压缩图，默认二者都有
          sourceType: ['album', 'camera'],        // 可以指定来源是相册还是相机，默认二者都有
          success(res) {
            if(res.tempFiles[0].size>1000000){
                tip.error("图片大小超出限制");
                return;
            }
            // let base64 = res.tempFilePaths[0]
            let base64 = wx.getFileSystemManager().readFileSync(res.tempFilePaths[0], 'base64')
            // console.log(base64)
            that.form.headimg =base64;
            that.base64 =true
            that.$apply()     // 返回选定照片的本地文件路径列表
            // that.uploadImgFile(that, base64)

          },
          fail(){
              console.log(`获取图片失败`)
          }
      })

    }

    //获取数据字典
    getDict(code,i) {
      const that = this
      api.getDictData({
        query: {
            head: {
                "transcode": "DC001",
                "type": "h"
            },
            data: {
                "groupcode": code,
                "selAll": "false"
            }
        }
      }).then(res=>{
        if (res.data.returnCode == "AAAAAAA") {
            var arr = []
            res.data.data.forEach((item,index)=>{
                arr.push(item.label)
            })
            if(code=='DICT_JOB_EDU'||code=='DICT_RESUME_WORKYEAR'){
              arr.shift()
            }
            that.screen[i].list = arr;
            that.$apply();
        } else {
            tip.error(res.returnMsg);
        }

      }).catch(err=>{

      })
    }

    //获取简历基本信息
    getData() {
      const that = this
      wx.showLoading({
          title: '加载中',
      })
      api.getResumeInfo({
        query: {
            head: {
                "transcode": "M0003",
                "type": "h"
            },
            data: {
                "token": that.token,
                "tokenKey": that.tokenKey,
                "resumeid": that.resumeid
            }
          }
        }).then(res=>{
          if (res.data.returnCode == "AAAAAAA") {
              wx.hideLoading()
              var baseInfo = JSON.parse(res.data.data);
              that.form = {
                  headimg:baseInfo.headimg,
                  username: baseInfo.username,
                  resumename: baseInfo.newresumename,
                  borndate: baseInfo.borndate,
                  address: baseInfo.address,
                  workyears: baseInfo.workyears,
                  jobstatus: baseInfo.jobstatus,
                  livecityid: baseInfo.livecityid,
                  marital: baseInfo.marital,
                  telephone: baseInfo.telephone,
                  email: baseInfo.email,
                  sex: baseInfo.sex,
                  educationbg:baseInfo.educationbg
              }
              that.$apply();
          } else {
            tip.error(res.returnMsg);
          }
        })

    }
    //修改表单数据
    changeData() {
      wx.showLoading({
          title: '加载中',
      })
      const that = this
      const {form} = this
      let obj = Object.assign(form,{
        token:that.token,
        tokenKey:that.tokenKey,
        resumeid:that.resumeid
      });

      if(!that.resumeid){
        delete obj.resumeid
      }

      if(!that.base64) delete obj.headimg
      api.getResumeInfo({
        query: {
              head: {
                  "transcode": "M0013",
                  "type": "h"
              },
              data: obj
          }
        }).then(res=>{
          console.log(res,'返回结果')
          wx.hideLoading()
          if(res.data && res.data.returnCode == "AAAAAAA") {
              let pages = getCurrentPages();
              let prevPage = pages[pages.length - 2];
              if(res.data.resumeid){
                  wx.redirectTo({
                    url: '/pages/personal/resume?resumeid='+res.data.resumeid+'&edit=true'
                  })
              }else{
                  prevPage.update(0)
                  wx.navigateBack({
                   delta: 1
                 })
              }

          }else{
              console.log(data)
          }

        }).catch(err=>{

        })
    }

  }
</script>
