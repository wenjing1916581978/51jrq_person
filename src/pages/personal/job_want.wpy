<style lang="less">
@import "../../styles/form.less";
</style>
<template>
  <view class="form container">
    <block wx:if="{{type==1}}">
      <view class="form_item bb pb">
          <view class="form_label">工作类型</view>
          <picker data-name="jobnature" data-current="0" value="{{screen[0].index}}" bindchange="pickerChange" range="{{screen[0].list}}">
            <view class="form_content flex alignitems">
              <view class="flex1">
                  {{form.jobnature?form.jobnature:'请选择'}}
              </view>
              <view class="form_arrow">
                <image src="../../images/icons/arrow_right.png"></image>
              </view>
            </view>
          </picker>
      </view>
      <view class="form_item bb pb">
          <view class="form_label">期望行业</view>
          <picker data-name="postids" data-current="1" value="{{screen[1].index}}" bindchange="pickerChange" range="{{screen[1].list}}">
              <view class="form_content flex alignitems">
                <view class="flex1">
                    {{form.postids?form.postids:'请选择'}}
                </view>
                <view class="form_arrow">
                  <image src="../../images/icons/arrow_right.png"></image>
                </view>
              </view>
          </picker>
      </view>
      <view class="form_item bb pb">
          <view class="form_label">期望职位</view>
          <view class="form_content">
              <input placeholder-class="phcolor" type="text" data-name="functions" value="{{form.functions}}" placeholder="请填写" bindinput="inputChange" />
          </view>
      </view>
      <view class="form_item bb pb">
        <view class="form_label">期望城市</view>
        <view class="form_content">
            <input placeholder-class="phcolor" type="text" data-name="sitecity" value="{{form.sitecity}}" placeholder="请填写" bindinput="inputChange" />
        </view>
      </view>
      <view class="form_item bb pb">
        <view class="form_label">期望薪资</view>
        <picker data-name="expectsalarycode" data-current="3" value="{{screen[3].index}}" bindchange="pickerChange" range="{{screen[3].list}}">
          <view class="form_content flex alignitems">
            <view class="flex1">
                {{form.expectsalarycode?form.expectsalarycode:'请选择'}}
            </view>
            <view class="form_arrow">
              <image src="../../images/icons/arrow_right.png"></image>
            </view>
          </view>
        </picker>
      </view>
      <view class="form_item pb">
          <view class="form_label">到岗时间</view>
          <picker data-name="poststime" data-current="2" value="{{screen[2].index}}" bindchange="pickerChange" range="{{screen[2].list}}">
            <view class="form_content flex alignitems">
              <view class="flex1">
                {{form.poststime?form.poststime:'请选择'}}
              </view>
              <view class="form_arrow">
                <image src="../../images/icons/arrow_right.png"></image>
              </view>
            </view>
          </picker>
      </view>
    </block>

    <view class="form_item pb" wx:else>
      <!-- <view class="form_label">自我评价</view> -->
      <view class="form_content">
        <textarea placeholder-class="phcolor" maxlength="500" data-name="selfremark" value="{{form.selfremark}}" placeholder="请输入自我评价（500字以内）" bindinput="inputChange" />
      </view>
    </view>
    <view class="form_btn">
      <button class="mainbtn" @tap="formSubmit">保存</button>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import api from '../../api/api';
  import tip from '../../utils/tip';

  export default class BaseInfo extends wepy.page {

    config = {
      navigationBarTitleText: '求职意向',
      navigationBarBackgroundColor: "#fafafa",
    }

    data = {
      screen:[
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        }
      ],
      token: "",
      tokenKey: "",
      resumeid:'',
      type:1,
      form:{
        jobintentcode:'',
        jobnature:'',
        postids:'',
        sitecity:'',
        functions:'',
        expectsalarycode:'',
        poststime:'',
        selfremark:'',
      }
    }

    onLoad(options) {
      const that = this;
      let login = wx.getStorageSync('login')
      that.resumeid = options.resumeid;
      that.type = options.type;
      that.token = login.token
      that.tokenKey = login.tokenKey
      that.$apply();

      if(options.functions) that.getData()
      if(options.type==1){
        const arr = ['DICT_JOB_JOBTYPE','DICT_COMP_INDUSTRY','DICT_RESUME_JOBSTATU','DICT_RESUME_ESC','DICT_RESUME_POSTTIME']
        for (var i = 0; i < arr.length; i++) {
          that.getDict(arr[i],i)
        }
      }


    }

    methods = {
        // 提交表单--基本信息编辑新增
        formSubmit: function(e) {
            const that = this
            const {form,type} = this
            if(type==1){
              if(!form.jobnature){
                tip.error('请选择工作类型');
                return false
              }
              if(!form.postids){
                tip.error('请选择期望行业');
                return false
              }
              if(!form.functions){
                tip.error('期望职位不为空');
                return false
              }
              if(!form.sitecity){
                tip.error('期望城市不为空');
                return false
              }

              if(!form.expectsalarycode){
                tip.error('请选择期望月薪');
                return false
              }
              if(!form.poststime){
                tip.error('请选择到岗时间');
                return false
              }
            }else{
              if(!form.selfremark){
                tip.error('自我评价不为空');
                return false
              }
            }


            that.changeData()
        },
        inputChange(e){
          const { form }=this
          const name = e.currentTarget.dataset.name
          form[name] = e.detail.value;
          this.$apply();
        },
        pickerChange(e){
          const { form }=this
          const name = e.currentTarget.dataset.name
          const current = e.currentTarget.dataset.current
          const index = e.detail.value
          form[name] = this.screen[current].list[index]
          this.screen[current].index = e.detail.value;
          this.$apply();
        }
    }

    //获取简历基本信息
    getData() {
      const  that = this
      wx.showLoading({
          title: '加载中',
      })
      api.getResumeInfo({
        query: {
            head: {
                "transcode": "M0004",
                "type": "h"
            },
            data: {
                "token": that.token,
                "tokenKey": that.tokenKey,
                "resumeid": that.resumeid
            }
        }
      }).then(res=>{
        console.log(res,'获取基本信息')
        if (res.data.returnCode == "AAAAAAA") {
          wx.hideLoading()
            var job = JSON.parse(res.data.data);
            that.form = {
              jobintentcode:job.jobintentcode ,
              jobnature:job.jobnature ,
              postids:job.postids ,
              sitecity:job.sitecity ,
              functions:job.functions ,
              expectsalarycode:job.expectsalarycode ,
              poststime:job.poststime ,
              selfremark:job.selfremark
            }
            that.$apply()
        }else {
          tip.error(res.returnMsg);
        }

      }).catch(err=>{

      })
    }

    //获取数据字典
    getDict(code,i) {
      const that = this
      api.getDictData({
        query: {
            head: {
                "transcode": "DC001",
                "type": "h"
            },
            data: {
                "groupcode": code,
                "selAll": "false"
            }
        }
      }).then(res=>{

        if (res.data.returnCode == "AAAAAAA") {
            var arr = []
            res.data.data.forEach((item,index)=>{
                arr.push(item.label)
            })
            that.screen[i].list = arr;
            that.$apply();
        } else {
            tip.error(res.returnMsg);
        }


      }).catch(err=>{

      })
    }
    //修改表单数据
    changeData() {
      const that = this
      const {form} = this
      let obj = Object.assign(form,{
        token:that.token,
        tokenKey:that.tokenKey,
        resumeid:that.resumeid
      });
      wx.showLoading({
        title: '加载中',
      })
      api.getResumeInfo({
          query: {
            head: {
                "transcode": "M0014",
                "type": "h"
            },
            data: obj
          }
        }).then(res=>{
          wx.hideLoading()
          if(res.data && res.data.returnCode == "AAAAAAA") {
              let pages = getCurrentPages();
              let prevPage = pages[pages.length - 2];
              prevPage.update(1)
              wx.navigateBack({
               delta: 1
             })
          }else{
              tip.error(res.data.returnMsg);
          }

        })
    }
  }
</script>
