<style lang="less">
@import "../../styles/form.less";
.headimg{
  width:160rpx;
  height:160rpx;
  display: block;
  border-radius: 50%;
  margin: 0 auto;
  background: #f8f8f8;
  margin-bottom: 20rpx;
  overflow: hidden;
  image{
    max-width: 100%;
    max-height: 100%;
  }
}
.skip{
  text-align: right;
  color: #a0a0a0;
}
.skipbtn{
  width: 280rpx;
  margin: 0 auto;
  padding: 24rpx 24rpx 0;
  button{
    height: 80rpx;
    line-height: 80rpx;
  }
}
</style>

<template>
  <view class="container form">
    <!-- <form bindsubmit="baseEditSubmit"> -->
      <view  @tap="changePortrait">
        <view class="headimg">
          <image mode="aspectFill"  class="icon-upload" wx:if="{{form.imgsrc}}" src="{{base64?'data:image/jpg;base64,':''}}{{form.imgsrc}}"></image>
          <image mode="aspectFill"  class="icon-upload" wx:else src="/images/icons/upload_head.png"></image>
        </view>
        <!-- <text>点击更换头像（图片大小不宜超过1M）</text> -->
      </view>

      <view class="form_item bb pb">
        <text class="form_label">姓名</text>
        <view class="form_content">
            <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="username" value="{{form.username}}" placeholder="请填写" />
        </view>
      </view>
      <view class="form_item bb pb">
        <text class="form_label">性别</text>
        <picker data-name="sex" data-current="0" value="{{screen[0].index}}" bindchange="pickerChange" range="{{screen[0].list}}">
          <view class="form_content flex alignitems">
            <view class="flex1">
                {{form.sex?form.sex:'请选择'}}
            </view>
            <van-icon name="arrow" size="18" color="#888888"/>
          </view>
        </picker>
      </view>
      <view class="form_item bb pb">
          <text class="form_label">期望职位</text>
          <view class="form_content">
              <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="jobname" value="{{form.jobname}}" placeholder="请填写" />
          </view>
      </view>

      <view class="form_item bb pb">
          <text class="form_label">期望行业</text>
          <picker data-name="postids" data-current="1" value="{{screen[1].index}}" bindchange="pickerChange" range="{{screen[1].list}}">
            <view class="form_content flex alignitems">
              <view class="flex1">
                  {{form.postids?form.postids:'请选择'}}
              </view>
              <van-icon name="arrow" size="18" color="#888888"/>
            </view>
          </picker>
      </view>
      <view class="form_item bb pb">
          <text class="form_label">期望地点</text>
          <view class="form_content">
              <input bindinput="inputChange" placeholder-class="phcolor" type="text" data-name="sitecity" value="{{form.sitecity}}" placeholder="请填写" />
          </view>
      </view>
      <view class="form_btn {{perfect?'skipbtn':''}}">
        <button class="mainbtn" @tap="formSubmit">保存</button>
      </view>
      <view class="skip" wx:if="{{perfect}}">
        <text @tap="skip">跳过</text>
      </view>
    <!-- </form> -->
  </view>
</template>

<script>
import wepy from 'wepy';
import api from '../../api/api';
import tip from '../../utils/tip';
import {LOGIN_INFO} from '../../utils/constants';

export default class BaseEdit extends wepy.page {
  config = {
    "usingComponents": {
      "van-icon": "../../vant/icon/index"
    }
  }
   data = {
      screen:[
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        },
        {
          list:[],
          index:[],
        }
      ],
      form:{
        imgsrc:'',
        username:'',
        sex:'',
        postids:'',
        jobname:'',
        sitecity:'',
      },
      token:'',
      tokenKey:'',
      perfect:false,
      base64:false
   }

   onLoad(options){
     const that = this
      let login = wx.getStorageSync('login')
      that.token = login.token
      that.tokenKey = login.tokenKey
      that.$apply()
      if(options.perfect){
        that.perfect = true
        that.$apply()
      }else{
        this.getPimg();
      }


       let arr = ["DICT_BASE_SEX", "DICT_COMP_INDUSTRY"]
       for (var i = 0; i < arr.length; i++) {
         that.getDict(arr[i],i)
       }
   }

   methods = {
     skip(){
       wx.switchTab({
        url: '/pages/personal/personal',
      })
     },
     changePortrait(){
         const that = this;
         that.choosePortrait();
     },
     inputChange(e){
       const { form }=this
       const name = e.currentTarget.dataset.name
       form[name] = e.detail.value;
       this.$apply();
     },
     pickerChange(e){
       const { form }=this
       const name = e.currentTarget.dataset.name
       const current = e.currentTarget.dataset.current
       const index = e.detail.value
       form[name] = this.screen[current].list[index]
       this.screen[current].index = e.detail.value;
       this.$apply();
     },
     formSubmit(e){
      const {form} = this
      if(!form.imgsrc){
        tip.error('头像不为空');
        return false
      }
      if(!form.username){
        tip.error('姓名不为空');
        return false
      }
      if(!form.sex){
        tip.error('请选择性别');
        return false
      }
      if(!form.sitecity){
        tip.error('期望城市不为空');
        return false
      }
      if(!form.postids){
        tip.error('请选择期望行业');
        return false
      }
      this.editPersonalInfo()
    }
   }

    choosePortrait(event) {
      const that = this;
      wx.chooseImage({
          count: 1,
          sizeType: ['compressed'],     // 可以指定是原图还是压缩图，默认二者都有
          sourceType: ['album', 'camera'],        // 可以指定来源是相册还是相机，默认二者都有
          success(res) {
            if(res.tempFiles[0].size>1000000){
                tip.error("图片大小超出限制");
                return;
            }
            // let base64 = res.tempFilePaths[0]
            let base64 = wx.getFileSystemManager().readFileSync(res.tempFilePaths[0], 'base64')
            // console.log(base64)
            that.form.imgsrc =base64;
            that.base64 =true
            that.$apply()     // 返回选定照片的本地文件路径列表
            // that.uploadImgFile(that, base64)

          },
          fail(){
              console.log(`获取图片失败`)
          }
      })

    }

   //修改个人信息
  editPersonalInfo() {
        const that = this;
        wx.showLoading({
            title: '加载中',
        })
        let obj =Object.assign(that.form,{
          tokenKey: that.tokenKey,
          token: that.token,
          imgtype: "png"
        })

        if(!that.base64) delete obj.imgsrc
        api.changeHeadImg({
            query: {
                head:{
                    type: "h",
                    transcode: "P0038"
                },
                data:obj
            }
        }).then(res=>{
          if(res.data.returnCode == 'AAAAAAA') {
              tip.success("操作成功");
              if(!that.perfect){
                wx.navigateBack({
                  delta: 1
                })
              }else{
                wx.switchTab({
                    url: '/pages/personal/personal'
                });
              }

           }else if(res.statusCode == 413){
               tip.error("图片文件过大");
           }else{
               tip.error(res.data.returnMsg);
           }
           wx.hideLoading()
        }).catch(err=>{
            tip.error(err.data.returnMsg);
        })
        // return json;
    }

    //获取个人信息
    async getPimg() {
        const that = this;
        api.getPimg({
            query: {
                    head: {
                        "transcode": "P0040",
                        "type": "h"
                    },
                    data: {
                        "tokenKey": that.tokenKey,
                        "token": that.token,
                    }
                }
        }).then(res=>{
          if(res.data.returnCode == 'AAAAAAA'){
            that.form.imgsrc = res.data.data.headimg
            that.form.username = res.data.data.username
            that.form.sex = res.data.data.sex
            that.form.sitecity = res.data.data.sitecity
            that.form.postids = res.data.data.postids
            that.form.jobname = res.data.data.jobname

            that.$apply()
          }else{
              tip.error(res.data.returnMsg);
          }
        })

    }

    //获取数据字典
    //获取数据字典
    getDict(code,i) {
      const that = this
      api.getDictData({
        query: {
            head: {
                "transcode": "DC001",
                "type": "h"
            },
            data: {
                "groupcode": code,
                "selAll": "false"
            }
        }
      }).then(res=>{
        if (res.data.returnCode == "AAAAAAA") {
            var arr = []
            res.data.data.forEach((item,index)=>{
                arr.push(item.label)
            })
            that.screen[i].list = arr;
            that.$apply();
        } else {
            tip.error(res.returnMsg);
        }

      }).catch(err=>{

      })
    }


}
</script>
